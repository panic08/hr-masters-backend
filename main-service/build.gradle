plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.0'
	id 'nu.studer.jooq' version '8.0'
	id 'io.spring.dependency-management' version '1.1.5'
}

group = 'ru.panic'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-jooq'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-database-postgresql'
	implementation 'io.micrometer:micrometer-registry-prometheus:1.12.5'
	runtimeOnly 'org.postgresql:postgresql'
	jooqGenerator 'org.postgresql:postgresql'
	testImplementation 'org.springdoc:springdoc-openapi-starter-webmvc-api:2.3.0'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}


jooq {
	configurations {
		postgresql {
			generationTool {
				logging = org.jooq.meta.jaxb.Logging.WARN
				jdbc {
					driver = 'org.postgresql.Driver'
					url = 'jdbc:postgresql://localhost:5432/postgres'
					user = 'postgres'
					password = '1234'
				}
				generator {
					database {
						inputSchema = 'public'
						includes = '.*'
						excludes = ''
					}
					generate {
						pojosEqualsAndHashCode = true
						relations = true
						deprecated = false
						records = true
						pojos = true
						immutablePojos = false
						fluentSetters = true
						springAnnotations = true
					}
					target {
						directory = '/src/main/java/generatedClasses'
					}
				}
			}
		}
	}
}
