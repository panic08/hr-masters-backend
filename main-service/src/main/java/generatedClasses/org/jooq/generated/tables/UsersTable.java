/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.SelectField;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Keys;
import org.jooq.generated.Public;
import org.jooq.generated.tables.CandidatesTable.CandidatesTablePath;
import org.jooq.generated.tables.ParsedCandidatesTable.ParsedCandidatesTablePath;
import org.jooq.generated.tables.records.UsersTableRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsersTable extends TableImpl<UsersTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.users_table</code>
     */
    public static final UsersTable USERS_TABLE = new UsersTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersTableRecord> getRecordType() {
        return UsersTableRecord.class;
    }

    /**
     * The column <code>public.users_table.id</code>.
     */
    public final TableField<UsersTableRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.users_table.email</code>.
     */
    public final TableField<UsersTableRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.users_table.password</code>.
     */
    public final TableField<UsersTableRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.users_table.registered_at</code>.
     */
    public final TableField<UsersTableRecord, LocalDateTime> REGISTERED_AT = createField(DSL.name("registered_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private UsersTable(Name alias, Table<UsersTableRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private UsersTable(Name alias, Table<UsersTableRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.users_table</code> table reference
     */
    public UsersTable(String alias) {
        this(DSL.name(alias), USERS_TABLE);
    }

    /**
     * Create an aliased <code>public.users_table</code> table reference
     */
    public UsersTable(Name alias) {
        this(alias, USERS_TABLE);
    }

    /**
     * Create a <code>public.users_table</code> table reference
     */
    public UsersTable() {
        this(DSL.name("users_table"), null);
    }

    public <O extends Record> UsersTable(Table<O> path, ForeignKey<O, UsersTableRecord> childPath, InverseForeignKey<O, UsersTableRecord> parentPath) {
        super(path, childPath, parentPath, USERS_TABLE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class UsersTablePath extends UsersTable implements Path<UsersTableRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> UsersTablePath(Table<O> path, ForeignKey<O, UsersTableRecord> childPath, InverseForeignKey<O, UsersTableRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UsersTablePath(Name alias, Table<UsersTableRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UsersTablePath as(String alias) {
            return new UsersTablePath(DSL.name(alias), this);
        }

        @Override
        public UsersTablePath as(Name alias) {
            return new UsersTablePath(alias, this);
        }

        @Override
        public UsersTablePath as(Table<?> alias) {
            return new UsersTablePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<UsersTableRecord> getPrimaryKey() {
        return Keys.USERS_TABLE_PKEY;
    }

    @Override
    public List<UniqueKey<UsersTableRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.USERS_TABLE_EMAIL_KEY);
    }

    private transient CandidatesTablePath _candidatesTable;

    /**
     * Get the implicit to-many join path to the
     * <code>public.candidates_table</code> table
     */
    public CandidatesTablePath candidatesTable() {
        if (_candidatesTable == null)
            _candidatesTable = new CandidatesTablePath(this, null, Keys.CANDIDATES_TABLE__CANDIDATES_TABLE_USER_ID_FKEY.getInverseKey());

        return _candidatesTable;
    }

    private transient ParsedCandidatesTablePath _parsedCandidatesTable;

    /**
     * Get the implicit to-many join path to the
     * <code>public.parsed_candidates_table</code> table
     */
    public ParsedCandidatesTablePath parsedCandidatesTable() {
        if (_parsedCandidatesTable == null)
            _parsedCandidatesTable = new ParsedCandidatesTablePath(this, null, Keys.PARSED_CANDIDATES_TABLE__PARSED_CANDIDATES_TABLE_USER_ID_FKEY.getInverseKey());

        return _parsedCandidatesTable;
    }

    @Override
    public UsersTable as(String alias) {
        return new UsersTable(DSL.name(alias), this);
    }

    @Override
    public UsersTable as(Name alias) {
        return new UsersTable(alias, this);
    }

    @Override
    public UsersTable as(Table<?> alias) {
        return new UsersTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UsersTable rename(String name) {
        return new UsersTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UsersTable rename(Name name) {
        return new UsersTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UsersTable rename(Table<?> name) {
        return new UsersTable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UsersTable where(Condition condition) {
        return new UsersTable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UsersTable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UsersTable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UsersTable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UsersTable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UsersTable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UsersTable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UsersTable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UsersTable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UsersTable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, String, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super UUID, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super UUID, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
